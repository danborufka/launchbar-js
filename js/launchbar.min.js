function apply_shortcut(shortcut, list)
{
	if(shortcut.indexOf('/') > 0)
	{
		shortcut = shortcut.split('/')[0];
	}

	if(list)
		while(typeof list[shortcut] === 'string')
		{
			shortcut = list[shortcut];
		}

	return shortcut;
};
function unique(array)
{
    return array.filter(function(el, index, arr) 
    {
        return index === arr.indexOf(el);
    });
};
Function.prototype.delay = function(dly)
{
	var self 	= this,
		args 	= arguments;

	setTimeout(function()
	{
		self.apply(window, Array.prototype.slice.call(args, 1));	
	}, dly);	
};if(!(window.hasOwnProperty('LAUNCHBAR') && LAUNCHBAR.loaded))
{
	var origin 	= location.origin.replace(/^[a-z]+\:\/\//, '').replace(/\:[0-9]+$/, ''), 	// remove protocol and port
		srv 	= location.protocol + '//danborufka.github.io/cdn/launchbar-js/',
		to_load = 0;

	jQuery(document).ready(function($) 
	{
		var opts = LAUNCHBAR ? $.extend(true, {}, LAUNCHBAR.options) : null;
			// if options exist already take a copy
		
		window.LAUNCHBAR = { 

			load: function(command)				// method to load scripts
			{
				if(LAUNCHBAR.history[command])	// if we have loaded this command before
				{
					console.info(command, 'already loaded => skipped.');
					return LAUNCHBAR;
				}

				to_load++;									// counter for number of loaded scripts

				var path = (command.indexOf('/')>0  ? 		// if there is a path delimiter
							'' 						: 		// leave command unchanged
							srv + 'commands/') + command;	// otherwise get path

				last_loaded_cmd = command;

				$.getScript(path + '.js', function()		// load script
				{
					window.LAUNCHBAR.history[command] = true;

					//last_loaded_cmd = command;
					LAUNCHBAR.utils.init();				// init
				});
				return LAUNCHBAR;
			},

			install: function(setup)
			{
				$.extend(true, LAUNCHBAR, setup);

				if( setup.commands )
				{
					LAUNCHBAR.addSuggestions( Object.keys( setup.commands ) );
				}
				if( setup.shortcuts )
				{
					LAUNCHBAR.addSuggestions( Object.keys( setup.shortcuts ) );
				}
				return LAUNCHBAR;
			},

			chain: function(setup)
			{
				var onClose;

				LAUNCHBAR.chainlinks 	= setup.commands;
				LAUNCHBAR.chaining 		= true;

				LAUNCHBAR.dom.$suggestions.detach();
				LAUNCHBAR.dom.$chain.empty().appendTo( LAUNCHBAR.dom.core );
				$(LAUNCHBAR.dom.input).hide(0).attr('list', 'lb_suggestions_chain').val('').show(0);

				$.extend(true, LAUNCHBAR.labels, setup.labels);	// prepare labels for suggestions
				LAUNCHBAR.addSuggestions( Object.keys( setup.commands ), true /* chaining */ );

				// save onClose if there is an existing handler
				if(LAUNCHBAR.events.hasOwnProperty('onClose'))
				{
					onClose = LAUNCHBAR.events.onClose;
				}

				LAUNCHBAR.events.onClose = function()
				{
					LAUNCHBAR.dom.$chain.detach();
					LAUNCHBAR.dom.$suggestions.appendTo( LAUNCHBAR.dom.core );
					$(LAUNCHBAR.dom.input).attr('list', 'lb_suggestions');

					onClose ? 
						LAUNCHBAR.events.onClose = onClose :
						delete LAUNCHBAR.events.onClose;

					if(onClose) onClose();
				};

				return LAUNCHBAR;
			},

			addSuggestions: function(cmd_list, chain)
			{
				cmd_list = cmd_list
					.filter(function(i){ return i.length > 1; }) 
					.map(function(val) 
					{
						if(val.length > 1)
						{
							var lbl = '';

							if(LAUNCHBAR.labels[val])
							{
								val += "  (" + LAUNCHBAR.labels[val] + ')';
							}
							return "<option value=\"" + val + "\" />";
						}
					});

				var $suggestions = chain ? LAUNCHBAR.dom.$chain : LAUNCHBAR.dom.$suggestions;

				$suggestions.html( $suggestions.html() + cmd_list.join('') );
				return LAUNCHBAR;
			},

			utils:
			{
				init: 		function()
							{
								var nextCall = localStorage.getItem("LAUNCHBAR_NEXTTIME_CALL"),
									list 	 = localStorage.getItem("LAUNCHBAR_COMMANDS");

								if(list)
								{
								 	jQuery.each(list.split(','), function(i, cmd)
							 		{
							 			LAUNCHBAR.load( cmd );
							 		});
								}

								// if a function call has been issued with nextTime() before the last page reload
								if(nextCall)
								{
									var params 	= jQuery.parseJSON(nextCall),	// read parameters from localStorage
										fn 		= params.shift();				// func name as well


									if(LAUNCHBAR.commands.hasOwnProperty(fn))
									{
										localStorage.removeItem("LAUNCHBAR_NEXTTIME_CALL");		// remove it from localStorage
										LAUNCHBAR.commands[fn].apply(arguments.caller, params);	// and run command
									}
									else
									{
										setTimeout( LAUNCHBAR.utils.init , 500 );
									}
								}
							},

		getSelectedText: 	function()
							{
								return  (window.getSelection 	|| 
										document.getSelection 	|| 
										document.selection.createRange().text || 
										function(){ return false; })() + '';
							},

				prefill: 	function( fields )
							{
								// for each key of the passed object
								Object.keys(fields).forEach(function(key)
								{
								 	var $el = $(key === '*' ? ':input' : '#' + key); // * stands for all inputs

								 	if( $el.is(':checkbox,:radio') )	// if radio or checkbox
								 	{
								 		$el.prop( 'checked', fields[key] ).parent().addClass('checked'); 	// check it according to object value
								 	}
								 	else
								 	{
								 		var val = fields[key];
								 		if(typeof val === 'object')		// if is array
								 		{
								 			// take random number between values of entry 0 and 1
								 			val = parseInt(val[0] + Math.random() * (val[1] - val[0]));
								 		}
								 		
								 		if( $el.is('select') )
								 		{
								 			// select <option> according to object value
								 			$el.children().eq( val ).prop('selected', true);
								 		}
								 		else
								 		{
								 			// just set value to object value
								 			$el.val( val );
								 		}
								 	}

								});
							},
				nextTime: 	function(fn, params)	// function to delay another function call until the script is being restarted (on page load e.g.)
							{
								var args 	= jQuery.makeArray(arguments),
									params 	= [args[1]];

								if(args.length > 2)
								{
									params.push( args[2] );		// if we got in more parameters than two append them to params
								}
								params.unshift(fn);				// add function name to the beginning of params

								localStorage.setItem("LAUNCHBAR_NEXTTIME_CALL", JSON.stringify( params ) );	// save to localStorage for next init()
							},
				noNextTime:	function(fn, params)	// function to cancel function calls delayed by nextTime()
							{
								localStorage.removeItem("LAUNCHBAR_NEXTTIME_CALL" );	// save to localStorage for next init()
							},

				checkUrl: 	function(url)	// adds a http:// in front of an URL that is missing a protocol
							{
								if(!url.match(/^[a-z]+\:\/\//))
								{
									return 'http://' + url;
								}
								return url;
							}
			},

			storage: 		
			{
				_parse: function( cmd, domain )
				{
					var st = localStorage;
					if(cmd in st)
					{
						st = $.parseJSON( st[cmd] );
					}
					else
					{
						st = {};
					};
					
					if(!(domain in st))
					{
						st[domain] = [];
					}
					return st;
				},
				_splice: function(store, domain, memo)
				{
					if(store[domain].length)
					{
						var index = $.inArray(memo, store[domain]);
						if(index >= 0)
						{
							store[domain].splice( index, 1 );
						}
					};
					return this;
				},
				_store: function(store, domain, cmd)
				{
					if(store[domain].length)
					{
						localStorage[cmd] = JSON.stringify( store );
					}
					else
					{
						localStorage.removeItem(cmd);
					}
				},

				add: function(domain, memo)
				{
					var store = this._parse('LAUNCHBAR_STORAGE_ADD', domain);

					store[domain].push( memo );
					store[domain] = unique(store[domain]);

					localStorage.LAUNCHBAR_STORAGE_ADD = JSON.stringify( store );

					return this;
				},

				remove: function(domain, memo)
				{
					var store = this._parse('LAUNCHBAR_STORAGE_ADD', domain);

					this._splice( store, domain, memo )
						._store(  store, domain, 'LAUNCHBAR_STORAGE_ADD');

					store = this._parse('LAUNCHBAR_STORAGE_DEL', domain);
					this._splice( store, domain, memo )
						._store(  store, domain, 'LAUNCHBAR_STORAGE_DEL');

					return this;
				},

				clear: function()
				{
					localStorage.removeItem('LAUNCHBAR_STORAGE_DEL');
					localStorage.removeItem('LAUNCHBAR_STORAGE_ADD');
				}
			},

			loaded: 		true,
			chaining: 		false,

			history: 		{},
			shortcuts: 		{},
			labels: 		{},
			
			options: 		{},
			dom: 			{},
			events: 		{},
			chainlinks:		{}
		};

		console.log('v0.1');

		var last_cmd,			// last value - TODO: save in localStorage for next time
			last_loaded_cmd,

			promoted = { 
				commands: 	{	load: 		LAUNCHBAR.load,
								install: 	LAUNCHBAR.install
							}, 
				labels: 	{ 	load: 		'Load command palette',
								install: 	'Install command palette'
							} 
			};

		if(LAUNCHBAR.options.monkey_version < 1.2)	// this is defined in extension / greasemonkey_script
{
	var upd = confirm('There\'s a new Tamper-/Greasemonkey script out. Please update now!');	
	
	if(upd)
	{
		try{

			location.href = srv + 'js/Launchbar.user.js';
			return false;
		}
		catch(e)
		{
			// ...
		}
	}
};	 // Greasemonkey handling
		// create launchbar markup:
if(!$('#launchbar').length)
{
	$('<div id="launchbar"><input type="text" name="tabtab" id="lb_tabtab" list="lb_suggestions"><datalist id="lb_suggestions"></datalist></div>').prependTo( document.body );
	// prepend launchbar style:
	$("<style>").prependTo(document.head).html( "#launchbar{display:none;box-sizing:border-box!important;width:200px;height:36px;margin:0 0 0 -100px!important;padding:6px 13px 9px 6px!important;background:#333;border:2px solid #DDD;border-radius:7px;box-shadow:1px 1px 15px rgba(0,0,0,.2);font-family:Consolas,Arial,sans-serif!important;font-size:11px!important;line-height:11px!important;position:absolute;left:50%;top:40px;z-index:9999999999}#launchbar input{display:inline-block!important;box-sizing:content-box!important;width:100%!important;height:100%!important;padding:0 0 3px 6px!important;margin:0!important;border-radius:1px!important;background:#999;color:#EEE;border:none!important;outline:0!important}#launchbar input::-moz-selection{background:#f7931e;color:#000}#launchbar input::selection{background:#f7931e;color:#000}.lb-highlighted{background:rgba(242, 112, 1, .2);outline:2px solid #f27001;opacity:1!important;}.lb-dimmed{opacity:.3!important;}" );

	window.LAUNCHBAR.dom.core = '#launchbar';
	window.LAUNCHBAR.dom.input = '#lb_tabtab';

	last_cmd = $(LAUNCHBAR.dom.input).val();
}		 // load launchbar markup

		window.LAUNCHBAR.options = opts;

		window.KEYS =  { SPACE: 32, TAB: 9, RETURN: 13, ESC: 27 };


if(LAUNCHBAR.options.shortcut)
{
	var shc = window.LAUNCHBAR.options.shortcut;

	if(typeof shc === 'string')
	{
		shc = shc.replace(/\s+/g, '').toLowerCase();	// remove whitespaces, lcase

		// if shortcut is combination of keys
		if( shc.indexOf('+') )
		{	
			shc = shc.split('+');

			shc[1] = 	shc[1].length === 1 ? 			// if single letter
						shc[1].charCodeAt() : 			// use charcode
						KEYS[shc[1].toUpperCase()];		// otherwise look up in KEYS var at line #22

			shc = { modifier: shc[0]+'Key', key: shc[1] };
		}
		else
		{
			shc = { key: shc };			// no modifier supplied
		}
	}
	window.LAUNCHBAR.options.shortcut = shc;
}
else
{
	// fallback to default shortcut Ctrl + SPACE
	window.LAUNCHBAR.options.shortcut = {modifier: 'ctrlKey', key: KEYS.SPACE };
}	// load shortcut functionality
		if(LAUNCHBAR.dom.hasOwnProperty('input'))
{
	var has_modifier = LAUNCHBAR.options.shortcut.hasOwnProperty('modifier');

	LAUNCHBAR.dom.$suggestions 	= $('#lb_suggestions');
	LAUNCHBAR.dom.$chain 	  	= $('<datalist id="lb_suggestions_chain"></datalist>');

	// LAUNCHBAR methods
	LAUNCHBAR.events.close = function()
	{
		$(LAUNCHBAR.dom.input).trigger('blur').trigger('blur');
		return LAUNCHBAR.events;
	};

	LAUNCHBAR.events.open = function()
	{
		var keyOptions = { which: LAUNCHBAR.options.shortcut.key };
		
		if(LAUNCHBAR.options.shortcut['modifier'])
		{
			keyOptions[LAUNCHBAR.options.shortcut.modifier] = true;
		}

		$(LAUNCHBAR.dom.input).trigger( $.Event( "keyup", keyOptions ));

		return LAUNCHBAR.events;
	};

	// checks if shortcut has been pressed
	function checkShortcut(e)
	{
		return ((has_modifier && e[LAUNCHBAR.options.shortcut.modifier]) || !has_modifier) && 
			e.which === LAUNCHBAR.options.shortcut.key;								// read shortcut from options
	}

	$(document)
		.on('blur', LAUNCHBAR.dom.input, function()
		{
			if(LAUNCHBAR.events['onClose'])
			{
				if( LAUNCHBAR.events.onClose() === false ) return false;
			}

			$(LAUNCHBAR.dom.core).stop().fadeOut(100);
			$(LAUNCHBAR.dom.input).val( last_cmd );

		})
		.on('keydown', function(e)
		{
			if( checkShortcut( e ) )	// read shortcut from options
			{
				return false;
			}
		})
		.on('keyup', function(e)
		{
			var $inp = $(LAUNCHBAR.dom.input),
				cmd, params, input;

			if($(LAUNCHBAR.dom.core).is(':visible'))
			{
				input 	= $inp.val().split(/\s+/);	// split input by spaces

				cmd 	= input.shift().toLowerCase();
				params 	= input.slice(0);

				$.each(params, function(i, val) 	// parse param to right datatype
				{
					switch(val)
					{
						case 'true':
							val = true;
							break;
						case 'false':
							val = false;
							break;
					}
					if(parseInt(val) == val) val = parseInt(val);

					params[i] = val;
				});

				switch(e.which)
				{
					case KEYS.RETURN:
							
						if( LAUNCHBAR.commands[cmd] )
						{
							// shortcuts to other commands are allowed:
							LAUNCHBAR.commands[cmd] = LAUNCHBAR.commands[ apply_shortcut(cmd, LAUNCHBAR.commands) ];

							// launch command
							LAUNCHBAR.commands[cmd].apply( arguments.caller, params );

							last_cmd = cmd + '';
						}
						else if( LAUNCHBAR.chaining )
						{
							LAUNCHBAR.chaining = !!LAUNCHBAR.chainlinks[cmd].apply( arguments.caller, params );
						}
						else if(console[cmd])
						{
							console[cmd].apply( console, params );
						}
						else
						{
							alert.delay(200, 'Sorry, command not found!');
						}

					case KEYS.ESC:
						
						if(!LAUNCHBAR.chaining)
							LAUNCHBAR.events.close();

				}
				return false;
			}
			else if( checkShortcut( e ) )
			{
				if(LAUNCHBAR.events['onOpen'])
				{
					if( LAUNCHBAR.events.onOpen() === false ) return;
				}

				$(LAUNCHBAR.dom.core).stop().fadeIn(100);
				$inp.focus()[0].setSelectionRange(0, $inp[0].value.length);	// select all
				return false;
			}

		})
		.on('scroll', function () 
		{
			$(LAUNCHBAR.dom.core).css('top', parseInt($(document).scrollTop()) + 100);
			// (pos fixed doesn't work properly in Chrome)
		})
		.trigger('scroll')	// if there's an initial scroll value: use it
		.on('change', '#launchbar input', function()
		{
			last_cmd = $(LAUNCHBAR.dom.input).val();
		});	
}
 		// load event handler

		LAUNCHBAR.load('default');
		LAUNCHBAR.install( promoted );	// promote internal LAUNCHBAR funcs to command palette

		if(LAUNCHBAR.options.user_command_path && LAUNCHBAR.options.user_command_path.length)					// if a local host path has been defined
		{
			LAUNCHBAR
				.load(LAUNCHBAR.options.user_command_path + 'default')	// look for default.js on localhost
				.load(LAUNCHBAR.options.user_command_path + origin);	// and for host.js too
		}
	});
}